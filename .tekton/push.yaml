apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: go-app-build-deploy
  annotations:
    pipelinesascode.tekton.dev/on-event: "[push, pull_request]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  serviceAccountName: pipeline-sa 
  taskRunTemplate:
    serviceAccountName: pipeline-sa 
  params:
    - name: git-url
      value: "{{ repo_url }}"
    - name: git-revision
      value: "{{ revision }}"
    - name: image-url
      value: docker.io/rishabh1234/simple-go
    - name: image-tag
      value: latest
    - name: deployment-file
      value: manifests/deployment.yaml

  workspaces:
    - name: shared-workspace
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi

  pipelineSpec:
    params:
      - name: git-url
        type: string
      - name: git-revision
        type: string
        default: main
      - name: image-url
        type: string
      - name: image-tag
        type: string
        default: latest
      - name: deployment-file
        type: string
        default: manifests/deployment.yaml
    workspaces:
      - name: shared-workspace
    tasks:
      - name: clone-repo
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: git-clone
            - name: namespace
              value: openshift-pipelines
        params:
          - name: URL
            value: $(params.git-url)
          - name: REVISION
            value: $(params.git-revision)
        workspaces:
          - name: output
            workspace: shared-workspace

      - name: build-go
        runAfter: [clone-repo]
        taskSpec:
          description: Build Go projects inside repo
          params:
            - name: package
              type: string
            - name: packages
              type: string
              default: ./cmd/...
            - name: version
              type: string
              default: latest
            - name: flags
              type: string
              default: "-v"
            - name: GOOS
              type: string
              default: linux
            - name: GOARCH
              type: string
              default: amd64
            - name: GO111MODULE
              type: string
              default: auto
            - name: CGO_ENABLED
              type: string
              default: "0"
          workspaces:
            - name: source
          stepTemplate:
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
          steps:
            - name: build
              image: docker.io/library/golang:$(params.version)
              workingDir: $(workspaces.source.path)
              env:
                - name: GOOS
                  value: $(params.GOOS)
                - name: GOARCH
                  value: $(params.GOARCH)
                - name: GO111MODULE
                  value: $(params.GO111MODULE)
                - name: CGO_ENABLED
                  value: $(params.CGO_ENABLED)
              script: |
                set -xe
                export HOME=$(workspaces.source.path)

                git config --global --add safe.directory /workspace/source
                cd $(workspaces.source.path)

                CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build $(params.flags) $(params.packages)
        params:
          - name: package
            value: "https://github.com/rishabhsvats/devspaces-pipeline-examples"
          - name: packages
            value: "."
        workspaces:
          - name: source
            workspace: shared-workspace

      - name: build-image
        runAfter: [build-go]
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: buildah
            - name: namespace
              value: openshift-pipelines
        params:
          - name: IMAGE
            value: $(params.image-url):$(params.image-tag)
        workspaces:
          - name: source
            workspace: shared-workspace

      - name: update-deployment
        runAfter: [build-image]
        taskSpec:
          params:
            - name: image
              type: string
            - name: file
              type: string
            - name: git-revision
              type: string
              default: main
          workspaces:
            - name: source
          stepTemplate:
            env:
              - name: HOME
                value: $(workspaces.source.path)
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
          steps:
            - name: update
              image: alpine/git
              workingDir: $(workspaces.source.path)
              script: |
                set -xe
                export HOME=$(workspaces.source.path)
                cd $(workspaces.source.path)

                git config --global --add safe.directory /workspace/source
                git checkout $(params.git-revision)

                sed -i "s|\(image: \).*|\1$(params.image)|" $(params.file)

                git config user.email "rishabhsvats@gmail.com"
                git config user.name "rishabhsvats"
                git add $(params.file)
                git commit -m "Update image to $(params.image)"
                git push origin HEAD:$(params.git-revision)
        params:
          - name: image
            value: $(params.image-url):$(params.image-tag)
          - name: file
            value: $(params.deployment-file)
        workspaces:
          - name: source
            workspace: shared-workspace
